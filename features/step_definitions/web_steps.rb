# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

Given /^PENDING/ do
  pending
end

Given /^the following sessions exist:$/ do |table|
  table.hashes.each do |session|
    #need to change the input so that field is not requited in this case
    #no_classes = Array.new
    #session[:dates_with_no_classes] = Array.new << session[:dates_with_no_classes]
    Semester.create(session)
  end
end

Given /^the following courses have been added:$/ do |table|
  table.hashes.each do |course|
    course[:class_min] = Integer(course[:class_min])
    course[:class_max] = Integer(course[:class_max])
    sem_id = Semester.find_by_name(course[:semester])
    course[:semester] = sem_id
    pta_id = Ptainstructor.find_by_name(course[:ptainstructor])
    course[:ptainstructor] = pta_id
    classroom_id = Teacher.find_by_classroom(course[:teacher])
    course[:teacher] = classroom_id
    Course.create(course)
  end
end

Given /^the following classrooms are in the database:$/ do |table|
 table.hashes.each do |classroom|
   sem_id = Semester.find_by_name(classroom[:semester])
   classroom[:semester] = sem_id
   Teacher.create(classroom)
 end
end

Given /^the following pta instructors exist:$/ do |table|
  table.hashes.each do |instructor|
    sem_id = Semester.find_by_name(instructor[:semester])
    instructor[:semester] = sem_id
    Ptainstructor.create(instructor)
  end
end

Given /^the following students are in the database:$/ do |table|
  table.hashes.each do |student|
    sem_id = Semester.find_by_name(student[:semester])
    student[:semester] = sem_id
    #course_id = Ptainstructor.find_by_name(student[:courses])
    #student[:courses] = course_id
    classroom_id = Teacher.find_by_name(student[:teacher])
    student[:teacher] = classroom_id
    Student.create(student)
  end
end

Given /^the following usernames and passwords exist:$/ do |table|
  table.hashes.each do |user|
    User.create(user)
  end
end

Then /I should see no populated courses/ do
  on_page_len = page.body.scan(/\/courses\/\d+/).length
  if on_page_len != 0
    flunk "Number of courses on page is not 0"
  end
end

Then /I should see "(.*)" before "(.*)"/ do |e1, e2|
  #  ensure that that e1 occurs before e2.
  #  page.content  is the entire content of the page as a string.
  match1 = /#{e1}/ =~ page.body
  match2 = /#{e2}/ =~ page.body
  if (match1 == nil)
    flunk "#{e1} not found on page"
  end
  if (match2 == nil)
    flunk "#{e2} not found on page"
  end
  if (match1 >= match2)
    flunk "#{e1} does not occur before #{e2}"
  end
  #flunk "Unimplemented"
end

When /^I confirm popup$/ do
  #page.evaluate_script('window.confirm = function() { return true; }')
  #page.click('OK')
  page.driver.browser.switch_to.alert.accept
  #popup.confirm
end

When /^I dismiss popup$/ do
  page.driver.browser.switch_to.alert.dismiss
  #page.evaluate_script('window.confirm = function() { return true; }')
  #page.click('Cancel')
  #popup.dismiss
end

When /^I fill in the new pta form correctly with name "(.*)"$/ do |name|
  fill_in_new_pta_form_correcctly(name)
end

def fill_in_new_pta_form_correcctly(name)
  fill_in("ptainstructor_name", :with => name)
  fill_in("ptainstructor_email", :with => "michelle@gmail.com")
  fill_in("ptainstructor_phone", :with => "234-456-7890")
  fill_in("ptainstructor_address", :with => "1600 Pennsylvania Avenue")
  fill_in("ptainstructor_bio", :with => "Info about me")
end

When /^I fill in the new classroom form correctly with classroom "(.*)"$/ do |location|
  fill_in_new_classroom_form_correcctly(location)
end

def fill_in_new_classroom_form_correcctly(location)
  fill_in("teacher_name", :with => "Mary")
  fill_in("teacher_grade", :with => "5")
  fill_in("teacher_classroom", :with => location)
end

When /^I fill in the new create class form correctly with subject "(.*)"$/ do |subject|
  fill_in_new_create_class_form_correcctly(subject)
end

def fill_in_new_create_class_form_correcctly(subject)
  fill_in("course_name", :with => subject)
  #fill_in("course_ptainstructor", :with => "")
  fill_in("course_description", :with => "A class about numbers")
  check("course_wednesday")
  fill_in("course_start_time", :with => "2:10pm")
  fill_in("course_end_time", :with => "5:10pm")
  fill_in("course_grade_range", :with => "1-5")
  fill_in("course_class_min", :with => "1")
  fill_in("course_class_max", :with => "20")
  fill_in("course_fee_per_meeting", :with => "10")
  fill_in("course_number_of_classes", :with => "10")
  fill_in("course_fee_for_additional_materials", :with => "15")
  fill_in("course_total_fee", :with => "100")
  fill_in("course_class_max", :with => "20")
end

When /^I fill in the new session form correctly with name "(.*)"$/ do |name|
  fill_in_new_session_form_correcctly(name)
end

def fill_in_new_session_form_correcctly(name)
  fill_in("semester_name", :with => name)
  fill_in("semester_start_date", :with => "09/21/2012")
  fill_in("semester_end_date", :with => "12/15/2012")
  fill_in("semester_registration_deadline", :with => "09/15/2012")
  fill_in("semester_lottery_deadline", :with => "09/10/2012")
  fill_in("semester_fee", :with => "10")
end

When /^I fill in the new student form correctly with name "(.*?)"$/ do |name|
  fill_in_new_student_form_correcctly(name)
end

def fill_in_new_student_form_correcctly(name)
  fill_in("student_first_name", :with => name)
  fill_in("student_last_name", :with => name)
  fill_in("student_grade", :with => "K")
  fill_in("student_parent_phone", :with => "555 555-5555")
  fill_in("student_parent_email", :with => "asdf@asdf.com")
end


Given /^I am an admin$/ do
  pending
end

Then /^no new classes should be added$/ do
  pending
end

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#

Then /^the "([^"]*)" drop-down should contain the option "([^"]*)"$/ do |id, value|
  page.has_select?(id, :options => [value]).should == true
  #page.should.have_xpath "//select[@id = '#{id}']/option[text() = '#{value}']"
end

Then /^the "([^"]*)" drop-down should not contain the option "([^"]*)"$/ do |id, value|
  page.has_select?(id, :options => [value]).should == false
  #page.should_not.have_xpath "//select[@id = '#{id}']/option[text() = '#{value}']"
end

When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

When /^I wait for (\d+) seconds$/ do |time|
  sleep time.to_f
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

# Are the supposed to be two of theses?  This one and the one above. -------------------------------------------------------------
Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end


Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end
